provider "aws" {
  region = "eu-central-1" # Укажите желаемый регион AWS
}

# Определение виртуальной частной сети (VPC) для VPC1
resource "aws_vpc" "vpc1" {
  cidr_block = "10.0.0.0/16"
  tags = {
    Name = "VPC1"
  }
}

# Определение виртуальной частной сети (VPC) для VPC2
resource "aws_vpc" "vpc2" {
  cidr_block = "10.1.0.0/16"
  tags = {
    Name = "VPC2"
  }
}

# Определение подсетей внутри VPC1
resource "aws_subnet" "public_subnets_vpc1" {
  count = 2
  cidr_block        = "10.0.${count.index}.0/24"
  vpc_id            = aws_vpc.vpc1.id
  availability_zone = "eu-central-1a"
  tags = {
    Name = "Public Subnet VPC1 - ${count.index + 1}"
  }
}

# Определение подсетей внутри VPC2
resource "aws_subnet" "public_subnets_vpc2" {
  count = 2
  cidr_block        = "10.1.${count.index}.0/24"
  vpc_id            = aws_vpc.vpc2.id
  availability_zone = "eu-central-1a"
  tags = {
    Name = "Public Subnet VPC2 - ${count.index + 1}"
  }
}

# Создание Application Load Balancer для VPC1
resource "aws_lb" "lb_vpc1" {
  name               = "lb-vpc1"
  subnets            = aws_subnet.public_subnets_vpc1[*].id
  security_groups    = [aws_security_group.lb_sg_vpc1.id]
  internal           = false
}

# Создание Application Load Balancer для VPC2
resource "aws_lb" "lb_vpc2" {
  name               = "lb-vpc2"
  subnets            = aws_subnet.public_subnets_vpc2[*].id
  security_groups    = [aws_security_group.lb_sg_vpc2.id]
  internal           = false
}

# Открытие HTTP порта в Security Group для VPC1
resource "aws_security_group" "lb_sg_vpc1" {
  name_prefix = "lb_sg_vpc1"
  vpc_id      = aws_vpc.vpc1.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Открытие HTTP порта в Security Group для VPC2
resource "aws_security_group" "lb_sg_vpc2" {
  name_prefix = "lb_sg_vpc2"
  vpc_id      = aws_vpc.vpc2.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Файл user_data.sh для экземпляров в VPC1
data "template_file" "user_data_vpc1" {
  template = <<-EOT
# Место для содержимого user_data_vpc1.sh
EOT
  vars = {
    hostname    = "WebInstanceVPC1"
    private_ip  = "\${aws_instance.web_instance_vpc1_public.private_ip}"
  }
}

resource "aws_instance" "web_instance_vpc1_public" {
  provider                = aws
  ami                     = "ami-0e00e602389e469a3"  # Используем ami-0e00e602389e469a3 для региона eu-central-1
  instance_type           = "t2.micro"
  subnet_id               = aws_subnet.public_subnets_vpc1[0].id
  vpc_security_group_ids  = [aws_security_group.lb_sg_vpc1.id]
  user_data               = data.template_file.user_data_vpc1.rendered
  tags = {
    Name  = "WebInstanceVPC1"
    Owner = "Bizon Nik"
  }
}

# Файл user_data.sh для экземпляров в VPC2
data "template_file" "user_data_vpc2" {
  template = <<-EOT
# Место для содержимого user_data_vpc2.sh
EOT
  vars = {
    hostname    = "WebInstanceVPC2"
    private_ip  = "\${aws_instance.web_instance_vpc2_public.private_ip}"
  }
}

resource "aws_instance" "web_instance_vpc2_public" {
  provider                = aws
  ami                     = "ami-0f34c5ea932e6f0e4"  # Используем ami-0f34c5ea932e6f0e4 для региона us-east-1
  instance_type           = "t2.micro"
  subnet_id               = aws_subnet.public_subnets_vpc2[0].id
  vpc_security_group_ids  = [aws_security_group.lb_sg_vpc2.id]
  user_data               = data.template_file.user_data_vpc2.rendered
  tags = {
    Name  = "WebInstanceVPC2"
    Owner = "Bizon Nik"
  }
}
