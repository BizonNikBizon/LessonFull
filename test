provider "aws" {
  region = "eu-central-1"
}

# Создание VPC и подсетей для региона eu-central-1
resource "aws_vpc" "vpc1" {
  cidr_block = "10.0.0.0/16"

  tags = {
    Name = "VPC1"
    Owner = "Bizon Nik"  # Добавляем тег Owner для указания владельца ресурса
  }
}

resource "aws_subnet" "public_subnet_vpc1" {
  vpc_id            = aws_vpc.vpc1.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = "eu-central-1a"

  tags = {
    Name = "Public Subnet VPC1"
    Owner = "Bizon Nik"  # Добавляем тег Owner для указания владельца ресурса
  }
}

resource "aws_subnet" "private_subnet_vpc1" {
  vpc_id            = aws_vpc.vpc1.id
  cidr_block        = "10.0.2.0/24"
  availability_zone = "eu-central-1b"

  tags = {
    Name = "Private Subnet VPC1"
    Owner = "Bizon Nik"  # Добавляем тег Owner для указания владельца ресурса
  }

  depends_on = [
    aws_internet_gateway.igw_vpc1
  ]
}

resource "aws_internet_gateway" "igw_vpc1" {
  vpc_id = aws_vpc.vpc1.id

  tags = {
    Owner = "Bizon Nik"  # Добавляем тег Owner для указания владельца ресурса
  }
}

resource "aws_route_table" "public_route_vpc1" {
  vpc_id = aws_vpc.vpc1.id

  tags = {
    Owner = "Bizon Nik"  # Добавляем тег Owner для указания владельца ресурса
  }
}

resource "aws_route" "public_internet_route_vpc1" {
  route_table_id         = aws_route_table.public_route_vpc1.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.igw_vpc1.id

  tags = {
    Owner = "Bizon Nik"  # Добавляем тег Owner для указания владельца ресурса
  }
}

resource "aws_security_group" "lb_sg_vpc1" {
  name_prefix = "lb_sg_vpc1"
  vpc_id      = aws_vpc.vpc1.id

  # Открываем только 80 порт для доступа к сайту по HTTP
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name  = "lb_sg_vpc1"
    Owner = "Bizon Nik"  # Добавляем тег Owner для указания владельца ресурса
  }
}

resource "aws_lb" "alb_vpc1" {
  name               = "alb-vpc1"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.lb_sg_vpc1.id]
  subnets            = [aws_subnet.public_subnet_vpc1.id, aws_subnet.public_subnet_vpc2.id]

  tags = {
    Name  = "alb-vpc1"
    Owner = "Bizon Nik"  # Добавляем тег Owner для указания владельца ресурса
  }
}

# Файл user_data.sh для экземпляров в VPC1
data "template_file" "user_data_vpc1" {
  template = <<-EOT
#!/bin/bash

# Получение приватного IP-адреса текущего экземпляра
PRIVATE_IP=\$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)

sudo yum update -y
sudo yum install -y httpd
sudo systemctl enable httpd
sudo systemctl start httpd

cat > /var/www/html/index.html <<EOF
<!DOCTYPE html>
<html>
<head>
  <title>My Simple Website</title>
</head>
<body style="background-color: lightblue;">
  <h1 style="color: red;">Привет Дядя Дима! Но Dithih звучит! Это работает! (VPC1 - Instance \${HOSTNAME} - Private IP: \${PRIVATE_IP})</h1>
  <img src="https://img2.akspic.ru/crops/1/0/0/8/6/168001/168001-more-voda-gidroresursy-oblako-prirodnyj_landshaft-3840x2160.jpg"
  style="width: 500px;">
</body>
</html>
EOF
EOT

  vars = {
    # Вставьте содержимое картинки BMW 525tds черной в base64
    bmw_image_base64 = "iVBORw0KGgoAAAANSUhEUgAAAT4AAACfCAMAAABK29vyAAAAilBMVEX///8AAADj4+P39/eFhYWUFAAEAgIBbW1vBwcG5ubmVlZVbW1tYWFjExMTi4uKwsLCYmJiHh4f6+vqysrIAAACH5BAEAAAAALAAAAAAGAAdAAAWFMWV2pUjEzdUh1YzZRVGRSSkl3Tm9tYmxuZkVlbldacFgwaXBnVVN5bW9HTnM2R1lmaENicDhuRkd5UHZQb3BlRzZ3TkZITGdsbEVlVzRrNWdBSEFTWlZyU2xYTkRJajN6d3A2c3h6UlYwTzIyc3pCNG5kS1JWZFlJX0kzZklLYUVZNVZLUW96NjNDXzJKQnZcNnFnQ0FFd2JGTUJvVlZBRmZWWlRzX1pNaExSV3M2U0pXaXMyak1UUzUyTlJbU0t2Y0d1SFF2Q0JyTlRVX0dzbGFNS1ZJUVNVRktjY0pXTkdpT0ljR2FhTk1SS0pUUUlaT0VLR1xjR"
  }
}

resource "aws_instance" "web_instance_vpc1_public" {
  ami           = "ami-0e00e602389e469a3"  # Используем ami-0e00e602389e469a3 для региона eu-central-1
  instance_type = "t2.micro"
  count         = 2

  subnet_id               = aws_subnet.public_subnet_vpc1.id
  vpc_security_group_ids  = [aws_security_group.lb_sg_vpc1.id]
  user_data               = data.template_file.user_data_vpc1.rendered

  # Вариант 1: Используем метаданные экземпляра для получения информации о самом экземпляре
  # В этом варианте вы увидите ID каждого инстанса, но не IP-адрес, так как IP-адрес будет внутренним в VPC.
  # Айпи адрес балансировщика будет публичным и к нему можно обратиться для получения доступа к сайту.
  metadata_options {
    http_endpoint               = "enabled"
    http_put_response_hop_limit = 2
  }

  tags = {
    Name  = "WebInstanceVPC1-${count.index + 1}"
    Owner = "Bizon Nik"  # Добавляем тег Owner для указания владельца ресурса
  }
}
