provider "aws" {
  alias  = "useast"
  region = "us-east-1"
}

provider "aws" {
  alias  = "eucentral"
  region = "eu-central-1"
}

resource "aws_vpc" "vpc1" {
  provider      = aws.useast
  cidr_block    = "10.0.0.0/16"
}

resource "aws_vpc" "vpc2" {
  provider      = aws.eucentral
  cidr_block    = "10.1.0.0/16"
}

resource "aws_subnet" "public_subnet_vpc1" {
  provider        = aws.useast
  vpc_id          = aws_vpc.vpc1.id
  cidr_block      = "10.0.1.0/24"
  availability_zone = "us-east-1a"
}

resource "aws_subnet" "public_subnet_vpc2" {
  provider        = aws.eucentral
  vpc_id          = aws_vpc.vpc2.id
  cidr_block      = "10.1.1.0/24"
  availability_zone = "eu-central-1a"
}

resource "aws_instance" "web_instance_vpc1_public" {
  provider        = aws.useast
  ami             = "ami-0f34c5ae932e6f0e4" # Replace with your AMI in the us-east-1 region
  instance_type   = "t2.micro"
  subnet_id       = aws_subnet.public_subnet_vpc1.id
  security_groups = [aws_security_group.web_sg.id]

  user_data = <<-EOT
              #!/bin/bash
              echo "Hello from Instance in VPC1" > index.html
              nohup python -m SimpleHTTPServer 80 &
              EOT
}

resource "aws_instance" "web_instance_vpc2_public" {
  provider        = aws.eucentral
  ami             = "ami-0b2ac948e23c57071" # Replace with your AMI in the eu-central-1 region
  instance_type   = "t2.micro"
  subnet_id       = aws_subnet.public_subnet_vpc2.id
  security_groups = [aws_security_group.web_sg.id]

  user_data = <<-EOT
              #!/bin/bash
              echo "Hello from Instance in VPC2" > index.html
              nohup python -m SimpleHTTPServer 80 &
              EOT
}

resource "aws_security_group" "web_sg" {
  name_prefix = "web_sg_"

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_lb" "lb_vpc1" {
  name               = "lb-vpc1"
  internal           = false
  load_balancer_type = "network"
  subnets            = [aws_subnet.public_subnet_vpc1.id, aws_subnet.public_subnet_vpc2.id]
}

output "lb_dns_name" {
  value = aws_lb.lb_vpc1.dns_name
}
