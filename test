provider "aws" {
  region = "eu-central-1"
}

resource "aws_vpc" "vpc1" {
  cidr_block = "10.0.0.0/16"
}

resource "aws_subnet" "public_subnets_vpc1" {
  vpc_id            = aws_vpc.vpc1.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = "eu-central-1a"
}

resource "aws_security_group" "lb_sg_vpc1" {
  name_prefix = "lb_sg_vpc1"
  vpc_id      = aws_vpc.vpc1.id
}

resource "aws_instance" "web_instance_vpc1_public" {
  ami                     = "ami-0e00e602389e469a3"  # Используйте правильный AMI ID для региона eu-central-1
  instance_type           = "t2.micro"
  subnet_id               = aws_subnet.public_subnets_vpc1.id
  vpc_security_group_ids  = [aws_security_group.lb_sg_vpc1.id]

  user_data = file("user_data_vpc1.sh")

  tags = {
    Name  = "WebInstanceVPC1"
    Owner = "Bizon Nik"
  }
}

provider "aws" {
  region = "us-east-1"
}

resource "aws_vpc" "vpc2" {
  cidr_block = "10.1.0.0/16"
}

resource "aws_subnet" "public_subnets_vpc2" {
  vpc_id            = aws_vpc.vpc2.id
  cidr_block        = "10.1.1.0/24"
  availability_zone = "us-east-1a"
}

resource "aws_security_group" "lb_sg_vpc2" {
  name_prefix = "lb_sg_vpc2"
  vpc_id      = aws_vpc.vpc2.id
}

resource "aws_instance" "web_instance_vpc2_public" {
  ami                     = "ami-0f34c5ae932e6f0e4"  # Используйте правильный AMI ID для региона us-east-1
  instance_type           = "t2.micro"
  subnet_id               = aws_subnet.public_subnets_vpc2.id
  vpc_security_group_ids  = [aws_security_group.lb_sg_vpc2.id]

  user_data = file("user_data_vpc2.sh")

  tags = {
    Name  = "WebInstanceVPC2"
    Owner = "Bizon Nik"
  }
}

resource "aws_lb" "lb_vpc" {
  name               = "lb_vpc"
  internal           = false
  load_balancer_type = "network"
  subnets            = [aws_subnet.public_subnets_vpc1.id, aws_subnet.public_subnets_vpc2.id]

  tags = {
    Name  = "NetworkLoadBalancer"
    Owner = "Bizon Nik"
  }
}

resource "aws_lb_target_group" "target_group_vpc" {
  name     = "target_group_vpc"
  port     = 80
  protocol = "TCP"
  vpc_id   = aws_vpc.vpc1.id

  health_check {
    interval            = 30
    path                = "/"
    port                = "traffic-port"
    protocol            = "TCP"
    healthy_threshold   = 2
    unhealthy_threshold = 2
  }
}

resource "aws_lb_listener" "listener_vpc" {
  load_balancer_arn = aws_lb.lb_vpc.arn
  port              = "80"
  protocol          = "TCP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.target_group_vpc.arn
  }
}

resource "aws_lb_target_group_attachment" "attachment_vpc1" {
  target_group_arn = aws_lb_target_group.target_group_vpc.arn
  target_id        = aws_instance.web_instance_vpc1_public.id
  port             = 80
}

resource "aws_lb_target_group_attachment" "attachment_vpc2" {
  target_group_arn = aws_lb_target_group.target_group_vpc.arn
  target_id        = aws_instance.web_instance_vpc2_public.id
  port             = 80
}

output "nlb_dns_name" {
  value = aws_lb.lb_vpc.dns_name
}
